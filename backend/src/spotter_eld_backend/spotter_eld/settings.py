"""
Django settings for spotter_eld_backend project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import sys
from pathlib import Path

import mongoengine
import sentry_sdk
from django.http import UnreadablePostError
from sentry_sdk.integrations.django import DjangoIntegration

try:
    from spotter_eld.local_settings import lsettings
except ImportError:
    lsettings = {}
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-dahagjp5p27su@f57%i@e#q7s)orl8=a1*0n3mqzlu-946q48#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = lsettings.get("DEBUG", False)
PROD = lsettings.get("PROD", True)
DEPLOY_LOCATION = lsettings.get("DEPLOY_LOCATION", "")  # possible values: ADMIN, API, DEV
DEPLOY_LOCATION_PUBLIC_IP = lsettings.get("DEPLOY_LOCATION_PUBLIC_IP", "")

# ALLOWED_HOSTS = lsettings.get("ALLOWED_HOSTS", ["localhost", "127.0.0.1"])
ALLOWED_HOSTS = "*"

# CORS_ALLOWED_ORIGINS = lsettings.get("CORS_ALLOWED_ORIGINS", ["http://localhost", "http://127.0.0.1:3000"])
CORS_ALLOWED_ORIGINS = "*"
CORS_ALLOW_HEADERS = ["*"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'spotter_eld',
    'spotter_eld_api',
    # 'spotter_eld_admin',
    # 'spotter_eld_web',
    'helper',
    'compressor'

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'spotter_eld.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'spotter_eld.wsgi.application'
IS_MAINTENANCE = lsettings.get("IS_MAINTENANCE", False)
ENABLE_PAYLOAD_IN_API_TRACKING = lsettings.get("ENABLE_PAYLOAD_IN_API_TRACKING", True)

# ===============================================================================
# Redis Settings
# ===============================================================================
REDIS_HOST = lsettings.get("REDIS_HOST", "localhost")
REDIS_PORT = lsettings.get("REDIS_PORT", 6379)
REDIS_DB = lsettings.get("REDIS_DB", 0)
REDIS_PASSWORD = lsettings.get("REDIS_PASSWORD", None)

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": lsettings.get("db_driver", "django.db.backends.mysql"),
        'CONN_MAX_AGE': lsettings.get("conn_max_age", 2500),
        "NAME": lsettings.get("db_name", "spotter_eld"),
        "USER": lsettings.get("db_user", "spotter_eld"),
        "PASSWORD": lsettings.get("db_pass", ""),
        "HOST": lsettings.get("db_host", "localhost"),
        "PORT": lsettings.get("db_port", ""),
    }
}

# ===============================================================================
# MongoDb
# ===============================================================================
MONGODB_HOST = lsettings.get("MONGODB_HOST", "mongodb://localhost:27017/")
MONGO_DB_BASE_HOST = lsettings.get("MONGO_DB_BASE_HOST", "localhost")
MONGO_DB = lsettings.get("MONGO_DB", "spotter_eld")
MONGO_USER = lsettings.get("MONGO_USER", None)
MONGO_PASSWORD = lsettings.get("MONGO_PASSWORD", None)
DEFAULT_DB_CONNECTION = mongoengine.connect(
    MONGO_DB,
    host=MONGODB_HOST,
    username=MONGO_USER,
    password=MONGO_PASSWORD,
    alias="default",
    authentication_source=MONGO_DB,
)

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATICFILES_DIRS = [
    # os.path.join(BASE_DIR, 'spotter_eld_admin/static'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


def skip_unreadable_post(record):
    """
    Used in the logging filters callback, to skip UnreadablePostError for the cancelled requests
    """
    if record.exc_info:
        _, exc_value = record.exc_info[:2]
        if isinstance(exc_value, UnreadablePostError):
            return False
    return True


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "require_debug_false": {"()": "django.utils.log.RequireDebugFalse"},
        "skip_unreadable_posts": {
            "()": "django.utils.log.CallbackFilter",
            "callback": skip_unreadable_post,
        },
    },
    "formatters": {
        "simple": {"format": "%(module)s line: %(lineno)s: %(message)s"},
        "level_module": {
            "format": "%(asctime)s %(levelname)s %(name)s.%(module)s  %(message)s"
        },
        "level_app": {"format": "%(asctime)s | %(levelname)s | %(message)s"},
        "time_message": {"format": "%(asctime)s - %(message)s"},
    },
    "handlers": {
        "email_handler": {"class": "logging.NullHandler"},
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "level_app",
        },
        "main_log_file": {
            "level": "DEBUG",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "backupCount": 5,
            "when": "midnight",
            "filename": "%s/main.log" % lsettings.get("MAIN_LOG_FILE", "/var/log/spotter_eld"),
            "formatter": "level_app",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console", "main_log_file"],  # mail_admins
            "level": "ERROR",
            "propagate": True,
        },
        "requests": {
            "handlers": ["console", "main_log_file"],  # mail_admins
            "level": "ERROR",
            "propagate": True,
        },
        'celery': {
            'handlers': ['console', 'main_log_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'parso': {
            'handlers': ['console', 'main_log_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'pymongo': {
            'handlers': ['console', 'main_log_file'],
            'level': 'ERROR',
            'propagate': False,
        },
        "": {
            "handlers": ["console", "main_log_file", "email_handler"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}

COMMANDS_FOLDER = os.listdir(os.path.join(BASE_DIR, 'spotter_eld', 'management', 'commands'))
PROCESSES_LIST = [f.replace('.py', '') for f in COMMANDS_FOLDER if f not in ['init.py', 'pycache']]
PROCESSES_LIST.extend(['runserver', 'test', 'shell'])

if len(sys.argv) > 1 and sys.argv[1] in PROCESSES_LIST:
    print("Resetting loggers to just log on console")
    # del LOGGING['handlers']['main_log_file']

    for loggerKey, lgr in LOGGING['loggers'].items():
        if sys.argv[1] in ['runserver', 'test', 'shell']:
            lgr['handlers'] = ['console']
        else:
            lgr['handlers'].remove('main_log_file')

if DEPLOY_LOCATION not in ['LOCAL']:
    def before_send(event, hint):
        try:
            error_message = event.get('logentry', {}).get('message')
            # print("sentry before_send error_message: ", error_message)

            if error_message:
                if error_message.startswith('Invalid HTTP_HOST header'):
                    event = None
                if "OSError: write error" in error_message:
                    event = None

            # print("sentry before_send hint: ", hint)

            if 'exc_info' in hint:
                exc_type, exc_value, tb = hint.get('exc_info')
                print("sentry before_send log_exc_info: ", str(exc_value))
                if exc_value and "'NoneType' object has no attribute 'push'" in str(exc_value):
                    event = None
                if exc_value and "OSError: write error" in str(exc_value):
                    event = None
                if exc_type == OSError and str(exc_value) == 'write error':
                    event = None
                if exc_value and "Apache/mod_wsgi request data read error: Partial results are valid but processing is incomplete." in str(exc_value):
                    event = None

        except Exception as e:
            print("Fail sentry before_send, event:", event, "hint:", hint, "Exception: ", e)

        print("sentry before_send event exist: ", True if event else False)
        return event


    # if PROD:
    #     dsn = "https://fa3af298e9da40e0864c02b72fb15bbe@o4504054843047936.ingest.sentry.io/4504060561522688"
    # else:
    #     dsn = "https://bcda83e3d0fd4801adbe4fbb142e4177@o1267879.ingest.sentry.io/6569511"

    # dsn = "sample-dsn"
    #
    # sentry_sdk.init(
    #     dsn=dsn,
    #     integrations=[DjangoIntegration()],
    #     environment="PROD" if PROD else "DEV",
    #     server_name=DEPLOY_LOCATION,
    #     before_send=before_send
    # )

LOGIN_URL = '/administration/login'
LOGIN_REDIRECT_URL = '/administration'
ACCESS_DENIED_URL = '/administration/access-denied"'
SERVER_ROLES = []

# ===============================================================================
# Email Settings
# ===============================================================================
# Project admins
ADMINS = lsettings.get('ADMINS', [('Haitham Ikkawy', 'ikkawyhaitham@gmail.com')])

EMAIL_FROM_NAME = 'spotterEld'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = lsettings.get('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = lsettings.get('EMAIL_PORT', 587)
EMAIL_USE_TLS = lsettings.get('EMAIL_USE_TLS', True)
EMAIL_HOST_USER = lsettings.get('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = lsettings.get('EMAIL_HOST_PASSWORD', '')
EMAIL_HOST_USER_DISPLAY_NAME = lsettings.get('EMAIL_HOST_USER_DISPLAY_NAME', 'NumAds')

# Compress settings
COMPRESS_ENABLED = True

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    # other finders..
    'compressor.finders.CompressorFinder',
)

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'spotter_eld/static'),
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/
STATIC_URL = lsettings.get('STATIC_URL', os.environ.get('STATIC_URL', "/static/"))
MEDIA_URL = lsettings.get('MEDIA_URL', os.environ.get('MEDIA_URL', "/media/"))
STATIC_ROOT = lsettings.get('STATIC_ROOT', os.environ.get('STATIC_ROOT', os.path.join(BASE_DIR, 'static')))
MEDIA_ROOT = lsettings.get('MEDIA_ROOT', os.environ.get('MEDIA_ROOT', os.path.join(BASE_DIR, '../media')))

# DRF Authentication Settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

# JWT Token Settings
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
}
