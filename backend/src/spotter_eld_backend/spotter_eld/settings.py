"""
Django settings for spotter_eld_backend project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path

# import mongoengine
# import sentry_sdk
# from django.http import UnreadablePostError
# from sentry_sdk.integrations.django import DjangoIntegration

try:
    from spotter_eld.local_settings import lsettings
except ImportError:
    lsettings = {}
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-dahagjp5p27su@f57%i@e#q7s)orl8=a1*0n3mqzlu-946q48#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = lsettings.get("DEBUG", False)
PROD = lsettings.get("PROD", True)
DEPLOY_LOCATION = lsettings.get("DEPLOY_LOCATION", "")  # possible values: ADMIN, API, DEV
DEPLOY_LOCATION_PUBLIC_IP = lsettings.get("DEPLOY_LOCATION_PUBLIC_IP", "")

# ALLOWED_HOSTS = lsettings.get("ALLOWED_HOSTS", ["localhost", "127.0.0.1"])
ALLOWED_HOSTS = ["*"]

CORS_ALLOWED_ORIGINS = lsettings.get("CORS_ALLOWED_ORIGINS", ["http://localhost", "http://127.0.0.1:3000"])
# CORS_ALLOWED_ORIGINS = ["*"]
CORS_ALLOW_HEADERS = ["*"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'spotter_eld',
    'spotter_eld_api',
    # 'spotter_eld_admin',
    # 'spotter_eld_web',
    'helper',
    'compressor'

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'spotter_eld.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'spotter_eld.wsgi.application'
IS_MAINTENANCE = lsettings.get("IS_MAINTENANCE", False)
ENABLE_PAYLOAD_IN_API_TRACKING = lsettings.get("ENABLE_PAYLOAD_IN_API_TRACKING", True)

# ===============================================================================
# Redis Settings
# ===============================================================================
REDIS_HOST = lsettings.get("REDIS_HOST", "localhost")
REDIS_PORT = lsettings.get("REDIS_PORT", 6379)
REDIS_DB = lsettings.get("REDIS_DB", 0)
REDIS_PASSWORD = lsettings.get("REDIS_PASSWORD", None)

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": lsettings.get("db_driver", "django.db.backends.mysql"),
        'CONN_MAX_AGE': lsettings.get("conn_max_age", 2500),
        "NAME": lsettings.get("db_name", "spotter_eld"),
        "USER": lsettings.get("db_user", "spotter_eld"),
        "PASSWORD": lsettings.get("db_pass", ""),
        "HOST": lsettings.get("db_host", "localhost"),
        "PORT": lsettings.get("db_port", ""),
    }
}

# ===============================================================================
# MongoDb
# ===============================================================================
MONGODB_HOST = lsettings.get("MONGODB_HOST", "mongodb://localhost:27017/")
MONGO_DB_BASE_HOST = lsettings.get("MONGO_DB_BASE_HOST", "localhost")
MONGO_DB = lsettings.get("MONGO_DB", "spotter_eld")
MONGO_USER = lsettings.get("MONGO_USER", None)
MONGO_PASSWORD = lsettings.get("MONGO_PASSWORD", None)
# DEFAULT_DB_CONNECTION = mongoengine.connect(
#     MONGO_DB,
#     host=MONGODB_HOST,
#     username=MONGO_USER,
#     password=MONGO_PASSWORD,
#     alias="default",
#     authentication_source=MONGO_DB,
# )

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATICFILES_DIRS = [
    # os.path.join(BASE_DIR, 'spotter_eld_admin/static'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

import logging.config

# Logging Configuration
# Disable prev config
LOGGING_CONFIG = None

# Get loglevel from env
LOGLEVEL = os.getenv('DJANGO_LOGLEVEL', 'info').upper()
logging.config.dictConfig({
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console': {
            'format': '%(asctime)s %(levelname)s [%(name)s:%(lineno)s] %(module)s %(process)d %(thread)d %(message)s',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'console',
        },
    },

    'loggers': {
        '': {
            'level': LOGLEVEL,
            'handlers': ['console', ],
        },
    },
})

LOGIN_URL = '/administration/login'
LOGIN_REDIRECT_URL = '/administration'
ACCESS_DENIED_URL = '/administration/access-denied"'
SERVER_ROLES = []

# ===============================================================================
# Email Settings
# ===============================================================================
# Project admins
ADMINS = lsettings.get('ADMINS', [('Haitham Ikkawy', 'ikkawyhaitham@gmail.com')])

EMAIL_FROM_NAME = 'spotterEld'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = lsettings.get('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = lsettings.get('EMAIL_PORT', 587)
EMAIL_USE_TLS = lsettings.get('EMAIL_USE_TLS', True)
EMAIL_HOST_USER = lsettings.get('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = lsettings.get('EMAIL_HOST_PASSWORD', '')
EMAIL_HOST_USER_DISPLAY_NAME = lsettings.get('EMAIL_HOST_USER_DISPLAY_NAME', 'NumAds')

# Compress settings
COMPRESS_ENABLED = True

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    # other finders..
    'compressor.finders.CompressorFinder',
)

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'spotter_eld/static'),
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/
STATIC_URL = lsettings.get('STATIC_URL', os.environ.get('STATIC_URL', "/static/"))
MEDIA_URL = lsettings.get('MEDIA_URL', os.environ.get('MEDIA_URL', "/media/"))
STATIC_ROOT = os.path.join(BASE_DIR, lsettings.get('STATIC_ROOT', "/home/haithamakk/spotter_eld_backend/static"))
MEDIA_ROOT = lsettings.get('MEDIA_ROOT', os.environ.get('MEDIA_ROOT', os.path.join(BASE_DIR, '../media')))

# DRF Authentication Settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

# JWT Token Settings
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
}
